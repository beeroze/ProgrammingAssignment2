## Put comments here that give an overall description of what your
## functions do
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
+  inv <- NULL
+  set <- function(y) {
+    x <<- y
+    inv <<- NULL
+  }
+  get <- function() x
+  setInvers <- function(Inverse) inv <<- Inverse
+  getInvers <- function() inv
+  list(set = set, get = get,
+       setInvers = setInvers,
+       getInvers = getInvers)
+}
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix.
## If the inverse has already been calculated (and the matrix has not changed), then it should retrive the value from the cache
cacheSolve <- function(x, ...) {
Inv <- x$getInv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setInv(inv)
inv
## Return a matrix that is the inverse of 'x'
}
makeCacheMatrix <- function(x = matrix()) {
+  inv <- NULL
+  set <- function(y) {
+    x <<- y
+    inv <<- NULL
+  }
+  get <- function() x
+  setInvers <- function(Inverse) inv <<- Inverse
+  getInvers <- function() inv
+  list(set = set, get = get,
+       setInvers = setInvers,
+       getInvers = getInvers)
+}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix.
## If the inverse has already been calculated (and the matrix has not changed), then it should retrive the value from the cache
cacheSolve <- function(x, ...) {
Inv <- x$getInv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setInv(inv)
inv
## Return a matrix that is the inverse of 'x'
}
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInvers <- function(Inverse) inv <<- Inverse
getInvers <- function() inv
list(set = set, get = get,
setInvers = setInvers,
getInvers = getInvers)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix.
## If the inverse has already been calculated (and the matrix has not changed), then it should retrive the value from the cache
cacheSolve <- function(x, ...) {
Inv <- x$getInv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setInv(inv)
inv
## Return a matrix that is the inverse of 'x'
}
git remote add origin https://github.com/beeroze/Assignment2.git
git push -u origin master
git remote add origin https://github.com/beeroze/Assignment2.git
git push -u origin master
echo # Assignment2 >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/beeroze/Assignment2.git
git push -u origin master
git remote add origin git@github.com:beeroze/Assignment2.git
git push -u origin master
